spring-boot的启动方式
/**
 * 1.直接运行main方法就可以启动springboot项目
 * 2.java -jar 命令启动
 * 3.mvn命令启动 mvn spring-boot:run
 */
目录结构
项目名称
    src
        main
            java
                package
            resource
                配置文件
        test
            java
                package
    target
        jar/war包打包路径
    pom.xml-maven的pom文件


 springboot的mvc注解
 @SpringBootApplication 定义该类为启动类
 涉及到springboot的加载原理，后面先看spring的加载原理后再回来看。
 springboot的mvc遵循rest接口协议，原先controller注解使用restController代替
 可继续使用@RequestMapping作为映射，推荐使用
 查询：@GetMapping
 其他的后续慢慢补上

 @configuration和@Bean的使用
     使用@configuration定义这个类为配置类,相当于以前的xml文件配置，定义该类为配置类
     相对于以前的xml的bean装配，将对象放到springboot的容器中，这样做的好处个人认为是更加的面向对象了
     可以不指定name属性，则根据类型注入，指定name属性，可以使用@resource注解指定获取指定的name，name属性相当于xml配置的bean的id
     @Bean(name = "userBean")

spring的配置文件
    配置文件在src/main/resources/application.properties
    可支持yaml文件格式，推荐使用yaml文件格式。
    在配置文件中可以自定义和修改各种参数，如tomcat端口号，项目路径等
spring boot多环境配置
    spring boot 启动时默认只会去加载application.xml文件
    可以配置多个配置文件方法：
    1.在application.yaml中添加配置项
    spring:
      profiles:
        active: env---env即为其他配置文件的后缀
    创建其他配置环境的配置文件
    application-env.yaml--开发环境
    application-test.yaml--测试环境
    Spring boot 运行时，默认加载的是application.yaml
    启动时它就会加载env的配置文件。
    使用maven命令启动和jar启动时都可以指定配置文件
    maven 启动：
    mvn spring-boot:run --spring.profiles.active='test'
    jar启动方法（得把jar包单独拿出来运行，不然还是读的默认文件）
    jar -jar xxx.jar --spring.profiles.active='test'

引入自定义配置项

    在application.yaml中添加了自定义配置项
    myproperties:
      aaa: aaa
      bbb: bbb
      ccc: ccc
      ddd: ddd
    定义一个类来接收此配置com.example.demo.properties.MyProperties
    并定义其对应的配置项作为属性。

    使用注解自定义配置项映射类，并使用prefix属性来匹配配置的父节点。
    @ConfigurationProperties(prefix = "myproperties")
    使用@Component注入到springboot容器中
    调用时直接使用用自动注入或类名注入即可
    自动注入位置 com.example.demo.controller.TestController.properties
    调用位置com.example.demo.controller.TestController.getProperties

  lombok插件的使用
  使用lombok插件，可以使用注解方式，实现对javabean的封装
  直接在pom文件中引入lombok的依赖包，然后使用注解即可
    // getter 方法
    @Getter
    // setter 方法
    @Setter
    // 所有参数构造
    @AllArgsConstructor
    // 重写equals和hashcode
    @EqualsAndHashCode
    // 无参构造方法
    @NoArgsConstructor


springboot的其他依赖
    进行Spring Boot配置文件部署时，发出警告Spring Boot Configuration Annotation Processor not configured，但是不影响运行。
	它的意思是“Spring Boot配置注解执行器没有配置”，配置注解执行器的好处是什么。
	配置注解执行器配置完成后，当执行类中已经定义了对象和该对象的字段后，在配置文件中对该类赋值时，便会非常方便的弹出提示信息。
	就是配置文件添加自定义配置项时，会有提示。如引入自定义配置项步骤时，配置文件添加自定义配置项时会有提示。
    <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-configuration-processor</artifactId>
	</dependency>

    热加载依赖包
    pom文件中添加热加载依赖，并开启热加载
    <!-- 热加载依赖包-->
     <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-devtools</artifactId>
         <!-- 设置为true，开启热加载 -->
         <optional>true</optional>
     </dependency>
    在idea的file-setting-build-compilers-勾选build-project-automatically即可，
    在修改了内容之后，需要重新build project即可以加载修改的内容。

    spring boot整合mybaties
    引入依赖
    mysql的依赖
    druid连接池的依赖
    mybaties的依赖
    <!-- 引入mysql的驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- 引入整合了spring boot的druid连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>
        <!-- 引入spring整合的mybaties -->
        <!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
    编写mybaties的配置文件












