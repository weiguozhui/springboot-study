spring-boot的启动方式
/**
 * 1.直接运行main方法就可以启动springboot项目
 * 2.java -jar 命令启动
 * 3.mvn命令启动 mvn spring-boot:run
 */
目录结构
项目名称
    .gitingore  配置忽略的不提交到git的文件
    src
        main
            java
                package
            resource
                配置文件
            staic---静态资源文件，js文件，html
            templates--前端框架页面-freemaker等
        test
            java
                package
    target
        jar/war包打包路径
    pom.xml-maven的pom文件


 springboot的mvc注解
 @SpringBootApplication 定义该类为启动类
 涉及到springboot的加载原理，后面先看spring的加载原理后再回来看。
 springboot的mvc遵循rest接口协议，原先controller注解使用restController代替
 可继续使用@RequestMapping作为映射，推荐使用
 查询：@GetMapping
 其他的后续慢慢补上

 @configuration和@Bean的使用
     使用@configuration定义这个类为配置类,相当于以前的xml文件配置，定义该类为配置类 
     相对于以前的xml的bean装配，将对象放到springboot的容器中，这样做的好处个人认为是更加的面向对象了，同时减少配置文件
     可以不指定name属性，则根据类型注入，指定name属性，可以使用@resource注解指定获取指定的name，name属性相当于xml配置的bean的id
     @Bean(name = "userBean")

spring的配置文件
    配置文件在src/main/resources/application.properties
    可支持yaml文件格式，推荐使用yaml文件格式。
    在配置文件中可以自定义和修改各种参数，如tomcat端口号，项目路径等
spring boot多环境配置
    spring boot 启动时默认只会去加载application.xml文件
    可以配置多个配置文件方法：
    1.在application.yaml中添加配置项
    spring:
      profiles:
        active: env---env即为其他配置文件的后缀
    创建其他配置环境的配置文件
    application-env.yaml--开发环境
    application-test.yaml--测试环境
    Spring boot 运行时，默认加载的是application.yaml
    启动时它就会加载env的配置文件。
    使用maven命令启动和jar启动时都可以指定配置文件
    maven 启动：
    mvn spring-boot:run --spring.profiles.active='test'
    jar启动方法（得把jar包单独拿出来运行，不然还是读的默认文件）
    jar -jar xxx.jar --spring.profiles.active='test'

引入自定义配置项======================
=================在application.yaml中添加了自定义配置项=================
    myproperties:
      aaa: aaa
      bbb: bbb
      ccc: ccc
      ddd: ddd
    定义一个类来接收此配置com.example.demo.properties.MyProperties
    并定义其对应的配置项作为属性。

    使用注解自定义配置项映射类，并使用prefix属性来匹配配置的父节点。
    @ConfigurationProperties(prefix = "myproperties")
    其中prefix指的全局配置文件节点名称即yaml文件中的父节点
    使用@Component注入到springboot容器中
    调用时直接使用用自动注入或类名注入即可
    自动注入位置 com.example.demo.controller.TestController.properties
    调用位置com.example.demo.controller.TestController.getProperties

    @vaule可以代替@ConfigurationProperties来获取配置值。
    需要在属性上直接设置字段值，也可以使用表达式取配置文件的值
     设置值
     @Value("aaa")
     @Value("true")
     @Value("${myproperties.bbb}")
     例子见com.example.demo.properties.ValueProperties

    @ConfigurationProperties与@Value的区别
    自动批量注入                  一个属性一个属性的写
    支持松散语法，即驼峰命名        不支持
    不支持SPEL语法                支持SPEL语法，即#{2*3}运算，结果可直接赋值给int类型
    支持jsr303数据校验，如@Email    不支持数据校验

    jsr303数据校验需要学习一下。==================
    即数据规范校验
    空检查
    @Null 验证对象是否为null
    @NotNull 验证对象是否不为null, 无法查检长度为0的字符串
    @NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.
    @NotEmpty 检查约束元素是否为NULL或者是EMPTY.

    Booelan检查
    @AssertTrue 验证 Boolean 对象是否为 true
    @AssertFalse 验证 Boolean 对象是否为 false

    长度检查
    @Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内
    @Length(min=, max=) Validates that the annotated string is between min and max included.

    日期检查
    @Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期
    @Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期
    @Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。

    数值检查
    建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为”“,Integer为null
    @Min 验证 Number 和 String 对象是否大等于指定的值
    @Max 验证 Number 和 String 对象是否小等于指定的值
    @DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度
    @DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度
    @Digits 验证 Number 和 String 的构成是否合法
    @Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。
    @Range(min=, max=) 被指定的元素必须在合适的范围内
    @Range(min=10000,max=50000,message=”range.bean.wage”)
    @Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)
    @CreditCardNumber信用卡验证
    @Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。
    @ScriptAssert(lang= ,script=, alias=)
    @URL(protocol=,host=, port=,regexp=, flags=)
    校验不过会抛出异常
    可以通过捕获异常来获取到错误信息
======================spring-boot 引用外部自定义配置文件=================
    1.自定义配置文件
    resources\myproperties\my.yaml
    2.编写配置文件内容
    myYaml:
      name: myYaml
      age: 29
      flag: true
    3.编写实体类，并设置getter和setter方法
    com.example.demo.properties.MyYaml
    4.在启动类引入配置文件
    @ImportResource(locations = "classpath:*myproperties/my.yaml")
    发现报错了，原因是只能引入xml文件啊！
    @ImportResource只能引入xml文件
    springboot不支持加载yml文件。需要自己写程序去加载。
=====================lombok插件的使用==================================
  使用lombok插件，可以使用注解方式，实现对javabean的封装
  直接在pom文件中引入lombok的依赖包，然后使用注解即可
    // getter 方法
    @Getter
    // setter 方法
    @Setter
    // 所有参数构造
    @AllArgsConstructor
    // 重写equals和hashcode
    @EqualsAndHashCode
    // 无参构造方法
    @NoArgsConstructor


springboot的其他依赖
    进行Spring Boot配置文件部署时，发出警告Spring Boot Configuration Annotation Processor not configured，但是不影响运行。
	它的意思是“Spring Boot配置注解执行器没有配置”，配置注解执行器的好处是什么。
	配置注解执行器配置完成后，当执行类中已经定义了对象和该对象的字段后，在配置文件中对该类赋值时，便会非常方便的弹出提示信息。
	就是配置文件添加自定义配置项时，会有提示。如引入自定义配置项步骤时，配置文件添加自定义配置项时会有提示。
    <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-configuration-processor</artifactId>
	</dependency>

    热加载依赖包
    pom文件中添加热加载依赖，并开启热加载
    <!-- 热加载依赖包-->
     <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-devtools</artifactId>
         <!-- 设置为true，开启热加载 -->
         <optional>true</optional>
     </dependency>
    在idea的file-setting-build-compilers-勾选build-project-automatically即可，
    在修改了内容之后，需要重新build project即可以加载修改的内容。

    spring boot整合mybaties
    引入依赖
    mysql的依赖
    druid连接池的依赖
    mybaties的依赖
    <!-- 引入mysql的驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- 引入整合了spring boot的druid连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>
        <!-- 引入spring整合的mybaties -->
        <!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
        创建实体类
        com.example.demo.dao.UserInfo
        创建映射接口
        com.example.demo.mapper.IUserInfoMapper
    编写mybaties的配置文件
        mybaties
            UserInfoMapper.xml
     在启动类中添加注解扫描映射接口
     @MapperScan(basePackages = "com.example.demo.mapper")

    注解方式整合mybaties
    唯一区别就是不用配置xml的配置路径
    直接在mapper接口的方法上添加mybaties提供的注解进行开发，如
    com.example.demo.mapper.IUserInfo2Mapper.getUserInfo2List



idea自动生成实体类
    idea-右边栏maven下面的database-datasource-mysql
    如果连接失败，则需要下载驱动
    然后重连即可
    且idea的database还可以当mysql的客户端使用，再也不用去下什么客户端啦。真好！
    idea真是太强大了！
    选择已连接上的库-右键-open query console就可以打开客户端啦！
    创建实体类
    选择表，右键Scripted extension-generate POJOS.groovy
    选择实体类的存放位置即可
    自动生成的实体类包名可能不正确，需要手动修改


分页助手整合
1.引入依赖
<dependency>
    <groupId>com.github.pagehelper</groupId>
    <artifactId>pagehelper-spring-boot-starter</artifactId>
    <version>1.2.12</version>
</dependency>

// 定义分页信息
        PageHelper.startPage(1,1);
        // 调用sql
        List<Userinfo2> userinfo2s= userInfo2Mapper.getUserInfo2List();
        // 将结果集放置到pageInfo对象中
        PageInfo<Userinfo2> pageInfo =  new PageInfo<>(userinfo2s);
        // 遍历结果
        for (Userinfo2 userInfo: pageInfo.getList()
             ) {
            System.out.println(userinfo2s);

        }
分页助手会自动添加查询数量的语句和分页信息，实际上是先查数量，再查分页。
使用分页助手的好处是实现分页的面向对象编程，不用功每一句sql都加分页信息，减少代码量


springboot整合jsp页面
    默认springboot 不整合jsp页面，需要手动引入并配置
    1.导入jsp依赖引擎
    2.创建目录
    src
        webapp
            WEB-INF
    3.指定view前缀
----整不成功，后面再看，不能卡死在这里，卡很久了

关于微服务
    将功能打散，一个功能或相关的功能作为一个服务单独部署。
    解耦







