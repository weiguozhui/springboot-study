#使用yaml文件做笔记可能层次更分明一些
反射:
  定义: JAVA反射机制是在程序运行状态，程序可以通过反射机制，对任意一个实体类都能获取其属下和方法，都能调用其任意方法和属性。这种机制叫反射。即程序运行过程中可以动态的获取任意对象的方法和属性并调用。
  java代码在计算中的阶段: 源码.java-->经过javac 编译变成了.class文件-->通过jvm的类加载变成class类对象 成员变量field[] fields+构造方法 constructor[] constructors+成员方法 method[] methods-->运行时jvm创建对象
  框架: 半成品的应用程序 spring、spring-boot等
  反射:
  好处: 在程序运行过程中去操作对象、字节码文件;提高扩展性，复用性、解耦
  反射操作 : 详细见测试用例com.example.demo.reflection.ReflectionDtoTest

注解:
  概念: 注解时代码层面上的注释，也叫元数据，类似于接口可以使用在类、方法、属性、接口上面，本身不含任何功能，仅仅只起到了标识性的作用。而我们常使用的注解时通过反射来判断是否包含注解和获取注解的属性，从而做不同业务处理。
  作用分类:
    1: 编写文档(swagger)
    2: 代码分析,通过反射做业务处理
    3: 编译检查
  jdk提供的内部注解: overrid、deprecate、supperessWarnings
  自定义注解:
    格式: public @interface 注解名{属性}
    注解本质:
      注解本质: 接口
      属性本质: 就是接口的抽象方法
    属性类型:
      1: 基本数据类型
      2: string
      3: 注解
      4: 枚举
      5: 以上类型的数组
#      如果定义了属性，在使用注解时需要赋值
#      如果只有一个属性，并且属性名叫value，使用是可以省略
#      如果是数组属性，使用时用{}赋值，只有一个值时，{}可以省略
    元注解:
      @Target:
